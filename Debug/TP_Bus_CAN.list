
TP_Bus_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003554  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080036dc  080036dc  000136dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003724  08003724  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800372c  0800372c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800372c  0800372c  0001372c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003730  08003730  00013730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000010  08003744  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003744  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001060d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ba  00000000  00000000  0003064d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00032a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00033728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d01  00000000  00000000  00034350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa06  00000000  00000000  0005b051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eca3a  00000000  00000000  0006aa57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00157491  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003560  00000000  00000000  001574e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036c4 	.word	0x080036c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080036c4 	.word	0x080036c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004c4:	4b17      	ldr	r3, [pc, #92]	; (8000524 <MX_CAN1_Init+0x64>)
 80004c6:	4a18      	ldr	r2, [pc, #96]	; (8000528 <MX_CAN1_Init+0x68>)
 80004c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 80004ca:	4b16      	ldr	r3, [pc, #88]	; (8000524 <MX_CAN1_Init+0x64>)
 80004cc:	2220      	movs	r2, #32
 80004ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <MX_CAN1_Init+0x64>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_CAN1_Init+0x64>)
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_CAN1_Init+0x64>)
 80004de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80004e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_CAN1_Init+0x64>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_CAN1_Init+0x64>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_CAN1_Init+0x64>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_CAN1_Init+0x64>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_CAN1_Init+0x64>)
 800050a:	2200      	movs	r2, #0
 800050c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_CAN1_Init+0x64>)
 8000510:	f000 fb90 	bl	8000c34 <HAL_CAN_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800051a:	f000 f9b7 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000030 	.word	0x20000030
 8000528:	40006400 	.word	0x40006400

0800052c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <HAL_CAN_MspInit+0x7c>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d128      	bne.n	80005a0 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <HAL_CAN_MspInit+0x80>)
 8000550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000552:	4a16      	ldr	r2, [pc, #88]	; (80005ac <HAL_CAN_MspInit+0x80>)
 8000554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000558:	6593      	str	r3, [r2, #88]	; 0x58
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <HAL_CAN_MspInit+0x80>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <HAL_CAN_MspInit+0x80>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	4a10      	ldr	r2, [pc, #64]	; (80005ac <HAL_CAN_MspInit+0x80>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_CAN_MspInit+0x80>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800057e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800058c:	2303      	movs	r3, #3
 800058e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000590:	2309      	movs	r3, #9
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <HAL_CAN_MspInit+0x84>)
 800059c:	f000 fe4a 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005a0:	bf00      	nop
 80005a2:	3728      	adds	r7, #40	; 0x28
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40006400 	.word	0x40006400
 80005ac:	40021000 	.word	0x40021000
 80005b0:	48000400 	.word	0x48000400

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_GPIO_Init+0x74>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <MX_GPIO_Init+0x74>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_GPIO_Init+0x74>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_GPIO_Init+0x74>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <MX_GPIO_Init+0x74>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_GPIO_Init+0x74>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_GPIO_Init+0x74>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <MX_GPIO_Init+0x74>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_GPIO_Init+0x74>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_GPIO_Init+0x74>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <MX_GPIO_Init+0x74>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_GPIO_Init+0x74>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_I2C3_Init+0x74>)
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <MX_I2C3_Init+0x78>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_I2C3_Init+0x74>)
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <MX_I2C3_Init+0x7c>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_I2C3_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_I2C3_Init+0x74>)
 8000644:	2201      	movs	r2, #1
 8000646:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_I2C3_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_I2C3_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2C3_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_I2C3_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_I2C3_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000666:	480e      	ldr	r0, [pc, #56]	; (80006a0 <MX_I2C3_Init+0x74>)
 8000668:	f000 ff8e 	bl	8001588 <HAL_I2C_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000672:	f000 f90b 	bl	800088c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000676:	2100      	movs	r1, #0
 8000678:	4809      	ldr	r0, [pc, #36]	; (80006a0 <MX_I2C3_Init+0x74>)
 800067a:	f001 f814 	bl	80016a6 <HAL_I2CEx_ConfigAnalogFilter>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000684:	f000 f902 	bl	800088c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000688:	2100      	movs	r1, #0
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_I2C3_Init+0x74>)
 800068c:	f001 f856 	bl	800173c <HAL_I2CEx_ConfigDigitalFilter>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 f8f9 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000058 	.word	0x20000058
 80006a4:	40005c00 	.word	0x40005c00
 80006a8:	10909cec 	.word	0x10909cec

080006ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0ac      	sub	sp, #176	; 0xb0
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2288      	movs	r2, #136	; 0x88
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fff1 	bl	80036b4 <memset>
  if(i2cHandle->Instance==I2C3)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a21      	ldr	r2, [pc, #132]	; (800075c <HAL_I2C_MspInit+0xb0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d13b      	bne.n	8000754 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80006dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fec2 	bl	8002474 <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80006f6:	f000 f8c9 	bl	800088c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <HAL_I2C_MspInit+0xb4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a18      	ldr	r2, [pc, #96]	; (8000760 <HAL_I2C_MspInit+0xb4>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <HAL_I2C_MspInit+0xb4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000712:	2303      	movs	r3, #3
 8000714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000718:	2312      	movs	r3, #18
 800071a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800072a:	2304      	movs	r3, #4
 800072c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000730:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000734:	4619      	mov	r1, r3
 8000736:	480b      	ldr	r0, [pc, #44]	; (8000764 <HAL_I2C_MspInit+0xb8>)
 8000738:	f000 fd7c 	bl	8001234 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_I2C_MspInit+0xb4>)
 800073e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_I2C_MspInit+0xb4>)
 8000742:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000746:	6593      	str	r3, [r2, #88]	; 0x58
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_I2C_MspInit+0xb4>)
 800074a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000754:	bf00      	nop
 8000756:	37b0      	adds	r7, #176	; 0xb0
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40005c00 	.word	0x40005c00
 8000760:	40021000 	.word	0x40021000
 8000764:	48000800 	.word	0x48000800

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 f9c9 	bl	8000b02 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f83a 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f7ff ff1e 	bl	80005b4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000778:	f7ff fea2 	bl	80004c0 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800077c:	f000 f90c 	bl	8000998 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000780:	f7ff ff54 	bl	800062c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  // Activation du CAN :
  HAL_CAN_Start (&hcan1);
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <main+0x6c>)
 8000786:	f000 fb50 	bl	8000e2a <HAL_CAN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CAN_TxHeader.StdId = 0x61;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <main+0x70>)
 800078c:	2261      	movs	r2, #97	; 0x61
 800078e:	601a      	str	r2, [r3, #0]
	  CAN_TxHeader.RTR = CAN_RTR_DATA;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <main+0x70>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
	  CAN_TxHeader.IDE = CAN_ID_STD;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <main+0x70>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
	  CAN_TxHeader.DLC = 2;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <main+0x70>)
 800079e:	2202      	movs	r2, #2
 80007a0:	611a      	str	r2, [r3, #16]
	  CAN_TxHeader.TransmitGlobalTime = DISABLE;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <main+0x70>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	751a      	strb	r2, [r3, #20]

	  HAL_CAN_AddTxMessage (&hcan1, &CAN_TxHeader, aData0, &pTxMailbox);
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <main+0x74>)
 80007aa:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <main+0x78>)
 80007ac:	490a      	ldr	r1, [pc, #40]	; (80007d8 <main+0x70>)
 80007ae:	4809      	ldr	r0, [pc, #36]	; (80007d4 <main+0x6c>)
 80007b0:	f000 fb7f 	bl	8000eb2 <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 80007b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b8:	f000 fa18 	bl	8000bec <HAL_Delay>
	  HAL_CAN_AddTxMessage (&hcan1, &CAN_TxHeader, aData90, &pTxMailbox);
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <main+0x74>)
 80007be:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <main+0x7c>)
 80007c0:	4905      	ldr	r1, [pc, #20]	; (80007d8 <main+0x70>)
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <main+0x6c>)
 80007c4:	f000 fb75 	bl	8000eb2 <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 80007c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007cc:	f000 fa0e 	bl	8000bec <HAL_Delay>
	  CAN_TxHeader.StdId = 0x61;
 80007d0:	e7db      	b.n	800078a <main+0x22>
 80007d2:	bf00      	nop
 80007d4:	20000030 	.word	0x20000030
 80007d8:	200000a4 	.word	0x200000a4
 80007dc:	200000bc 	.word	0x200000bc
 80007e0:	2000002c 	.word	0x2000002c
 80007e4:	20000000 	.word	0x20000000

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b096      	sub	sp, #88	; 0x58
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2244      	movs	r2, #68	; 0x44
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 ff5c 	bl	80036b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800080a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800080e:	f000 ffef 	bl	80017f0 <HAL_PWREx_ControlVoltageScaling>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000818:	f000 f838 	bl	800088c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800081c:	2310      	movs	r3, #16
 800081e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000828:	2360      	movs	r3, #96	; 0x60
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	2302      	movs	r3, #2
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000830:	2301      	movs	r3, #1
 8000832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000834:	2301      	movs	r3, #1
 8000836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000838:	2328      	movs	r3, #40	; 0x28
 800083a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800083c:	2307      	movs	r3, #7
 800083e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4618      	mov	r0, r3
 800084e:	f001 f825 	bl	800189c <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000858:	f000 f818 	bl	800088c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2303      	movs	r3, #3
 8000862:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	2104      	movs	r1, #4
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fbf7 	bl	8002068 <HAL_RCC_ClockConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000880:	f000 f804 	bl	800088c <Error_Handler>
  }
}
 8000884:	bf00      	nop
 8000886:	3758      	adds	r7, #88	; 0x58
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	; 0x60
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f93e 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <SystemInit+0x5c>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <SystemInit+0x5c>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <SystemInit+0x60>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a11      	ldr	r2, [pc, #68]	; (8000994 <SystemInit+0x60>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <SystemInit+0x60>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <SystemInit+0x60>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <SystemInit+0x60>)
 8000960:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000964:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000968:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <SystemInit+0x60>)
 800096c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000970:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <SystemInit+0x60>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a07      	ldr	r2, [pc, #28]	; (8000994 <SystemInit+0x60>)
 8000978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800097c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SystemInit+0x60>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00
 8000994:	40021000 	.word	0x40021000

08000998 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_USART2_UART_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009dc:	f002 fa06 	bl	8002dec <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009e6:	f7ff ff51 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000c0 	.word	0x200000c0
 80009f4:	40004400 	.word	0x40004400

080009f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b0ac      	sub	sp, #176	; 0xb0
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2288      	movs	r2, #136	; 0x88
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 fe4b 	bl	80036b4 <memset>
  if(uartHandle->Instance==USART2)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <HAL_UART_MspInit+0xb0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d13b      	bne.n	8000aa0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fd1d 	bl	8002474 <HAL_RCCEx_PeriphCLKConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a40:	f7ff ff24 	bl	800088c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_UART_MspInit+0xb4>)
 8000a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a48:	4a18      	ldr	r2, [pc, #96]	; (8000aac <HAL_UART_MspInit+0xb4>)
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_UART_MspInit+0xb4>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <HAL_UART_MspInit+0xb4>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a60:	4a12      	ldr	r2, [pc, #72]	; (8000aac <HAL_UART_MspInit+0xb4>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_UART_MspInit+0xb4>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a74:	230c      	movs	r3, #12
 8000a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 fbca 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	37b0      	adds	r7, #176	; 0xb0
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	40021000 	.word	0x40021000

08000ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab4:	f7ff ff3e 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ab8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000aba:	e003      	b.n	8000ac4 <LoopCopyDataInit>

08000abc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000abe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ac0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ac2:	3104      	adds	r1, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ac8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000aca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000acc:	d3f6      	bcc.n	8000abc <CopyDataInit>
	ldr	r2, =_sbss
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ad0:	e002      	b.n	8000ad8 <LoopFillZerobss>

08000ad2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ad2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ad4:	f842 3b04 	str.w	r3, [r2], #4

08000ad8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <LoopForever+0x16>)
	cmp	r2, r3
 8000ada:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000adc:	d3f9      	bcc.n	8000ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ade:	f002 fdc5 	bl	800366c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ae2:	f7ff fe41 	bl	8000768 <main>

08000ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000aec:	08003734 	.word	0x08003734
	ldr	r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000af4:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000af8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000afc:	20000148 	.word	0x20000148

08000b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC1_2_IRQHandler>

08000b02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 fb5d 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b12:	200f      	movs	r0, #15
 8000b14:	f000 f80e 	bl	8000b34 <HAL_InitTick>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	71fb      	strb	r3, [r7, #7]
 8000b22:	e001      	b.n	8000b28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b24:	f7ff feb8 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b28:	79fb      	ldrb	r3, [r7, #7]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_InitTick+0x6c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d023      	beq.n	8000b90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_InitTick+0x70>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_InitTick+0x6c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fb5b 	bl	800121a <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10f      	bne.n	8000b8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d809      	bhi.n	8000b84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 fb33 	bl	80011e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_InitTick+0x74>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e007      	b.n	8000b94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	e004      	b.n	8000b94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
 8000b8e:	e001      	b.n	8000b94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000000c 	.word	0x2000000c
 8000ba4:	20000004 	.word	0x20000004
 8000ba8:	20000008 	.word	0x20000008

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	2000000c 	.word	0x2000000c
 8000bd0:	20000144 	.word	0x20000144

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000144 	.word	0x20000144

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000000c 	.word	0x2000000c

08000c34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e0ed      	b.n	8000e22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fc6a 	bl	800052c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0202 	bic.w	r2, r2, #2
 8000c66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c68:	f7ff ffb4 	bl	8000bd4 <HAL_GetTick>
 8000c6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c6e:	e012      	b.n	8000c96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c70:	f7ff ffb0 	bl	8000bd4 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b0a      	cmp	r3, #10
 8000c7c:	d90b      	bls.n	8000c96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2205      	movs	r2, #5
 8000c8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e0c5      	b.n	8000e22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1e5      	bne.n	8000c70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f042 0201 	orr.w	r2, r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cb4:	f7ff ff8e 	bl	8000bd4 <HAL_GetTick>
 8000cb8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cba:	e012      	b.n	8000ce2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cbc:	f7ff ff8a 	bl	8000bd4 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b0a      	cmp	r3, #10
 8000cc8:	d90b      	bls.n	8000ce2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2205      	movs	r2, #5
 8000cda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e09f      	b.n	8000e22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0e5      	beq.n	8000cbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7e1b      	ldrb	r3, [r3, #24]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d108      	bne.n	8000d0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	e007      	b.n	8000d1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7e5b      	ldrb	r3, [r3, #25]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d108      	bne.n	8000d34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e007      	b.n	8000d44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7e9b      	ldrb	r3, [r3, #26]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d108      	bne.n	8000d5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0220 	orr.w	r2, r2, #32
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	e007      	b.n	8000d6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0220 	bic.w	r2, r2, #32
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7edb      	ldrb	r3, [r3, #27]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d108      	bne.n	8000d88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 0210 	bic.w	r2, r2, #16
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e007      	b.n	8000d98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f042 0210 	orr.w	r2, r2, #16
 8000d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7f1b      	ldrb	r3, [r3, #28]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d108      	bne.n	8000db2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0208 	orr.w	r2, r2, #8
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	e007      	b.n	8000dc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 0208 	bic.w	r2, r2, #8
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7f5b      	ldrb	r3, [r3, #29]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d108      	bne.n	8000ddc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f042 0204 	orr.w	r2, r2, #4
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e007      	b.n	8000dec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0204 	bic.w	r2, r2, #4
 8000dea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	431a      	orrs	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	ea42 0103 	orr.w	r1, r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	1e5a      	subs	r2, r3, #1
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d12e      	bne.n	8000e9c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2202      	movs	r2, #2
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0201 	bic.w	r2, r2, #1
 8000e54:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e56:	f7ff febd 	bl	8000bd4 <HAL_GetTick>
 8000e5a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e5c:	e012      	b.n	8000e84 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e5e:	f7ff feb9 	bl	8000bd4 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b0a      	cmp	r3, #10
 8000e6a:	d90b      	bls.n	8000e84 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2205      	movs	r2, #5
 8000e7c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e012      	b.n	8000eaa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1e5      	bne.n	8000e5e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e006      	b.n	8000eaa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
  }
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b089      	sub	sp, #36	; 0x24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ed0:	7ffb      	ldrb	r3, [r7, #31]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d003      	beq.n	8000ede <HAL_CAN_AddTxMessage+0x2c>
 8000ed6:	7ffb      	ldrb	r3, [r7, #31]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	f040 80b8 	bne.w	800104e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10a      	bne.n	8000efe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d105      	bne.n	8000efe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80a0 	beq.w	800103e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	0e1b      	lsrs	r3, r3, #24
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d907      	bls.n	8000f1e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e09e      	b.n	800105c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10d      	bne.n	8000f4c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f3a:	68f9      	ldr	r1, [r7, #12]
 8000f3c:	6809      	ldr	r1, [r1, #0]
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3318      	adds	r3, #24
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	440b      	add	r3, r1
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	e00f      	b.n	8000f6c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f56:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f5c:	68f9      	ldr	r1, [r7, #12]
 8000f5e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f60:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3318      	adds	r3, #24
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	440b      	add	r3, r1
 8000f6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6819      	ldr	r1, [r3, #0]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	691a      	ldr	r2, [r3, #16]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3318      	adds	r3, #24
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	7d1b      	ldrb	r3, [r3, #20]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d111      	bne.n	8000fac <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3318      	adds	r3, #24
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	4413      	add	r3, r2
 8000f94:	3304      	adds	r3, #4
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	6811      	ldr	r1, [r2, #0]
 8000f9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3318      	adds	r3, #24
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	440b      	add	r3, r1
 8000fa8:	3304      	adds	r3, #4
 8000faa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3307      	adds	r3, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	061a      	lsls	r2, r3, #24
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3306      	adds	r3, #6
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	041b      	lsls	r3, r3, #16
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3305      	adds	r3, #5
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	3204      	adds	r2, #4
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	4610      	mov	r0, r2
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	6811      	ldr	r1, [r2, #0]
 8000fd4:	ea43 0200 	orr.w	r2, r3, r0
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	011b      	lsls	r3, r3, #4
 8000fdc:	440b      	add	r3, r1
 8000fde:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fe2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3303      	adds	r3, #3
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	061a      	lsls	r2, r3, #24
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3302      	adds	r3, #2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	041b      	lsls	r3, r3, #16
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	4313      	orrs	r3, r2
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	7812      	ldrb	r2, [r2, #0]
 8001004:	4610      	mov	r0, r2
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	6811      	ldr	r1, [r2, #0]
 800100a:	ea43 0200 	orr.w	r2, r3, r0
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	440b      	add	r3, r1
 8001014:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001018:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3318      	adds	r3, #24
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	4413      	add	r3, r2
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	6811      	ldr	r1, [r2, #0]
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3318      	adds	r3, #24
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	440b      	add	r3, r1
 8001038:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e00e      	b.n	800105c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e006      	b.n	800105c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
  }
}
 800105c:	4618      	mov	r0, r3
 800105e:	3724      	adds	r7, #36	; 0x24
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff47 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff5c 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff8e 	bl	8001120 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffb0 	bl	8001188 <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	e17f      	b.n	8001544 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8171 	beq.w	800153e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d00b      	beq.n	800127c <HAL_GPIO_Init+0x48>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d007      	beq.n	800127c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001270:	2b11      	cmp	r3, #17
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b12      	cmp	r3, #18
 800127a:	d130      	bne.n	80012de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b2:	2201      	movs	r2, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f003 0201 	and.w	r2, r3, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d118      	bne.n	800131c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012f0:	2201      	movs	r2, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	f003 0201 	and.w	r2, r3, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x128>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b12      	cmp	r3, #18
 800135a:	d123      	bne.n	80013a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	220f      	movs	r2, #15
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	08da      	lsrs	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3208      	adds	r2, #8
 800139e:	6939      	ldr	r1, [r7, #16]
 80013a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0203 	and.w	r2, r3, #3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80ac 	beq.w	800153e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <HAL_GPIO_Init+0x330>)
 80013e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ea:	4a5e      	ldr	r2, [pc, #376]	; (8001564 <HAL_GPIO_Init+0x330>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6613      	str	r3, [r2, #96]	; 0x60
 80013f2:	4b5c      	ldr	r3, [pc, #368]	; (8001564 <HAL_GPIO_Init+0x330>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013fe:	4a5a      	ldr	r2, [pc, #360]	; (8001568 <HAL_GPIO_Init+0x334>)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3302      	adds	r3, #2
 8001406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	220f      	movs	r2, #15
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001428:	d025      	beq.n	8001476 <HAL_GPIO_Init+0x242>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4f      	ldr	r2, [pc, #316]	; (800156c <HAL_GPIO_Init+0x338>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01f      	beq.n	8001472 <HAL_GPIO_Init+0x23e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4e      	ldr	r2, [pc, #312]	; (8001570 <HAL_GPIO_Init+0x33c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x23a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4d      	ldr	r2, [pc, #308]	; (8001574 <HAL_GPIO_Init+0x340>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x236>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4c      	ldr	r2, [pc, #304]	; (8001578 <HAL_GPIO_Init+0x344>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x232>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_GPIO_Init+0x348>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x22e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x34c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x22a>
 800145a:	2306      	movs	r3, #6
 800145c:	e00c      	b.n	8001478 <HAL_GPIO_Init+0x244>
 800145e:	2307      	movs	r3, #7
 8001460:	e00a      	b.n	8001478 <HAL_GPIO_Init+0x244>
 8001462:	2305      	movs	r3, #5
 8001464:	e008      	b.n	8001478 <HAL_GPIO_Init+0x244>
 8001466:	2304      	movs	r3, #4
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x244>
 800146a:	2303      	movs	r3, #3
 800146c:	e004      	b.n	8001478 <HAL_GPIO_Init+0x244>
 800146e:	2302      	movs	r3, #2
 8001470:	e002      	b.n	8001478 <HAL_GPIO_Init+0x244>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x244>
 8001476:	2300      	movs	r3, #0
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	f002 0203 	and.w	r2, r2, #3
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	4093      	lsls	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001488:	4937      	ldr	r1, [pc, #220]	; (8001568 <HAL_GPIO_Init+0x334>)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	3302      	adds	r3, #2
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ba:	4a32      	ldr	r2, [pc, #200]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e4:	4a27      	ldr	r2, [pc, #156]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800150e:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001538:	4a12      	ldr	r2, [pc, #72]	; (8001584 <HAL_GPIO_Init+0x350>)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa22 f303 	lsr.w	r3, r2, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	f47f ae78 	bne.w	8001244 <HAL_GPIO_Init+0x10>
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	48000400 	.word	0x48000400
 8001570:	48000800 	.word	0x48000800
 8001574:	48000c00 	.word	0x48000c00
 8001578:	48001000 	.word	0x48001000
 800157c:	48001400 	.word	0x48001400
 8001580:	48001800 	.word	0x48001800
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e081      	b.n	800169e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d106      	bne.n	80015b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff f87c 	bl	80006ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2224      	movs	r2, #36	; 0x24
 80015b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	e006      	b.n	8001610 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800160e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d104      	bne.n	8001622 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001620:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001634:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001644:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	ea42 0103 	orr.w	r1, r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	021a      	lsls	r2, r3, #8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69d9      	ldr	r1, [r3, #28]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b20      	cmp	r3, #32
 80016ba:	d138      	bne.n	800172e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e032      	b.n	8001730 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2224      	movs	r2, #36	; 0x24
 80016d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0201 	orr.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2220      	movs	r2, #32
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800172e:	2302      	movs	r3, #2
  }
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b20      	cmp	r3, #32
 8001750:	d139      	bne.n	80017c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800175c:	2302      	movs	r3, #2
 800175e:	e033      	b.n	80017c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2224      	movs	r2, #36	; 0x24
 800176c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800178e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0201 	orr.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
  }
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_PWREx_GetVoltageRange+0x18>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40007000 	.word	0x40007000

080017f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017fe:	d130      	bne.n	8001862 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800180c:	d038      	beq.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001816:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2232      	movs	r2, #50	; 0x32
 8001824:	fb02 f303 	mul.w	r3, r2, r3
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0c9b      	lsrs	r3, r3, #18
 8001830:	3301      	adds	r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001834:	e002      	b.n	800183c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3b01      	subs	r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001848:	d102      	bne.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x60>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f2      	bne.n	8001836 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185c:	d110      	bne.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e00f      	b.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800186a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186e:	d007      	beq.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001878:	4a05      	ldr	r2, [pc, #20]	; (8001890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40007000 	.word	0x40007000
 8001894:	20000004 	.word	0x20000004
 8001898:	431bde83 	.word	0x431bde83

0800189c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e3d4      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ae:	4ba1      	ldr	r3, [pc, #644]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b8:	4b9e      	ldr	r3, [pc, #632]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80e4 	beq.w	8001a98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <HAL_RCC_OscConfig+0x4a>
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b0c      	cmp	r3, #12
 80018da:	f040 808b 	bne.w	80019f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	f040 8087 	bne.w	80019f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018e6:	4b93      	ldr	r3, [pc, #588]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x62>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e3ac      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1a      	ldr	r2, [r3, #32]
 8001902:	4b8c      	ldr	r3, [pc, #560]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <HAL_RCC_OscConfig+0x7c>
 800190e:	4b89      	ldr	r3, [pc, #548]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001916:	e005      	b.n	8001924 <HAL_RCC_OscConfig+0x88>
 8001918:	4b86      	ldr	r3, [pc, #536]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001924:	4293      	cmp	r3, r2
 8001926:	d223      	bcs.n	8001970 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fd41 	bl	80023b4 <RCC_SetFlashLatencyFromMSIRange>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e38d      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193c:	4b7d      	ldr	r3, [pc, #500]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a7c      	ldr	r2, [pc, #496]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001942:	f043 0308 	orr.w	r3, r3, #8
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4977      	ldr	r1, [pc, #476]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800195a:	4b76      	ldr	r3, [pc, #472]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	4972      	ldr	r1, [pc, #456]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
 800196e:	e025      	b.n	80019bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001970:	4b70      	ldr	r3, [pc, #448]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6f      	ldr	r2, [pc, #444]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001976:	f043 0308 	orr.w	r3, r3, #8
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b6d      	ldr	r3, [pc, #436]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	496a      	ldr	r1, [pc, #424]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800198e:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	4965      	ldr	r1, [pc, #404]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d109      	bne.n	80019bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fd01 	bl	80023b4 <RCC_SetFlashLatencyFromMSIRange>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e34d      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019bc:	f000 fc36 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	495a      	ldr	r1, [pc, #360]	; (8001b38 <HAL_RCC_OscConfig+0x29c>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
 80019d8:	4a58      	ldr	r2, [pc, #352]	; (8001b3c <HAL_RCC_OscConfig+0x2a0>)
 80019da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019dc:	4b58      	ldr	r3, [pc, #352]	; (8001b40 <HAL_RCC_OscConfig+0x2a4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f8a7 	bl	8000b34 <HAL_InitTick>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d052      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	e331      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d032      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019fc:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a4c      	ldr	r2, [pc, #304]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a08:	f7ff f8e4 	bl	8000bd4 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a10:	f7ff f8e0 	bl	8000bd4 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e31a      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a22:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2e:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a40      	ldr	r2, [pc, #256]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	493b      	ldr	r1, [pc, #236]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4c:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	4936      	ldr	r1, [pc, #216]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
 8001a60:	e01a      	b.n	8001a98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a33      	ldr	r2, [pc, #204]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a6e:	f7ff f8b1 	bl	8000bd4 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a76:	f7ff f8ad 	bl	8000bd4 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e2e7      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a88:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f0      	bne.n	8001a76 <HAL_RCC_OscConfig+0x1da>
 8001a94:	e000      	b.n	8001a98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d074      	beq.n	8001b8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d005      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x21a>
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	2b0c      	cmp	r3, #12
 8001aae:	d10e      	bne.n	8001ace <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d10b      	bne.n	8001ace <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d064      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2f0>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d160      	bne.n	8001b8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e2c4      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad6:	d106      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x24a>
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	e01d      	b.n	8001b22 <HAL_RCC_OscConfig+0x286>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aee:	d10c      	bne.n	8001b0a <HAL_RCC_OscConfig+0x26e>
 8001af0:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001af6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e00b      	b.n	8001b22 <HAL_RCC_OscConfig+0x286>
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <HAL_RCC_OscConfig+0x298>)
 8001b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01c      	beq.n	8001b64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff f853 	bl	8000bd4 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b30:	e011      	b.n	8001b56 <HAL_RCC_OscConfig+0x2ba>
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	080036dc 	.word	0x080036dc
 8001b3c:	20000004 	.word	0x20000004
 8001b40:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f846 	bl	8000bd4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e280      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b56:	4baf      	ldr	r3, [pc, #700]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x2a8>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f836 	bl	8000bd4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f832 	bl	8000bd4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e26c      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7e:	4ba5      	ldr	r3, [pc, #660]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x2d0>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d060      	beq.n	8001c5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_OscConfig+0x310>
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d119      	bne.n	8001bda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d116      	bne.n	8001bda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bac:	4b99      	ldr	r3, [pc, #612]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x328>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e249      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b93      	ldr	r3, [pc, #588]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	061b      	lsls	r3, r3, #24
 8001bd2:	4990      	ldr	r1, [pc, #576]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd8:	e040      	b.n	8001c5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d023      	beq.n	8001c2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be2:	4b8c      	ldr	r3, [pc, #560]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a8b      	ldr	r2, [pc, #556]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7fe fff1 	bl	8000bd4 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf6:	f7fe ffed 	bl	8000bd4 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e227      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c08:	4b82      	ldr	r3, [pc, #520]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b7f      	ldr	r3, [pc, #508]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	061b      	lsls	r3, r3, #24
 8001c22:	497c      	ldr	r1, [pc, #496]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
 8001c28:	e018      	b.n	8001c5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2a:	4b7a      	ldr	r3, [pc, #488]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a79      	ldr	r2, [pc, #484]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7fe ffcd 	bl	8000bd4 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7fe ffc9 	bl	8000bd4 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e203      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c50:	4b70      	ldr	r3, [pc, #448]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d03c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01c      	beq.n	8001caa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c70:	4b68      	ldr	r3, [pc, #416]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c76:	4a67      	ldr	r2, [pc, #412]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7fe ffa8 	bl	8000bd4 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7fe ffa4 	bl	8000bd4 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1de      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c9a:	4b5e      	ldr	r3, [pc, #376]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ef      	beq.n	8001c88 <HAL_RCC_OscConfig+0x3ec>
 8001ca8:	e01b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001caa:	4b5a      	ldr	r3, [pc, #360]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb0:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7fe ff8b 	bl	8000bd4 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc2:	f7fe ff87 	bl	8000bd4 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1c1      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd4:	4b4f      	ldr	r3, [pc, #316]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ef      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80a6 	beq.w	8001e3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cf4:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10d      	bne.n	8001d1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d00:	4b44      	ldr	r3, [pc, #272]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d04:	4a43      	ldr	r2, [pc, #268]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0c:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <HAL_RCC_OscConfig+0x57c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d118      	bne.n	8001d5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d28:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <HAL_RCC_OscConfig+0x57c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a3a      	ldr	r2, [pc, #232]	; (8001e18 <HAL_RCC_OscConfig+0x57c>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d34:	f7fe ff4e 	bl	8000bd4 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3c:	f7fe ff4a 	bl	8000bd4 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e184      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4e:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <HAL_RCC_OscConfig+0x57c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d108      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4d8>
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d68:	4a2a      	ldr	r2, [pc, #168]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d72:	e024      	b.n	8001dbe <HAL_RCC_OscConfig+0x522>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d110      	bne.n	8001d9e <HAL_RCC_OscConfig+0x502>
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d92:	4a20      	ldr	r2, [pc, #128]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d9c:	e00f      	b.n	8001dbe <HAL_RCC_OscConfig+0x522>
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da4:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db4:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001db6:	f023 0304 	bic.w	r3, r3, #4
 8001dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d016      	beq.n	8001df4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc6:	f7fe ff05 	bl	8000bd4 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7fe ff01 	bl	8000bd4 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e139      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_OscConfig+0x578>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0ed      	beq.n	8001dce <HAL_RCC_OscConfig+0x532>
 8001df2:	e01a      	b.n	8001e2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7fe feee 	bl	8000bd4 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dfa:	e00f      	b.n	8001e1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7fe feea 	bl	8000bd4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d906      	bls.n	8001e1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e122      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e1c:	4b90      	ldr	r3, [pc, #576]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1e8      	bne.n	8001dfc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e2a:	7ffb      	ldrb	r3, [r7, #31]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b8b      	ldr	r3, [pc, #556]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	4a8a      	ldr	r2, [pc, #552]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 8108 	beq.w	8002056 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	f040 80d0 	bne.w	8001ff0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e50:	4b83      	ldr	r3, [pc, #524]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 0203 	and.w	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d130      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d127      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e80:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d11f      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e90:	2a07      	cmp	r2, #7
 8001e92:	bf14      	ite	ne
 8001e94:	2201      	movne	r2, #1
 8001e96:	2200      	moveq	r2, #0
 8001e98:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d113      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea8:	085b      	lsrs	r3, r3, #1
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d109      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	085b      	lsrs	r3, r3, #1
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d06e      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	d069      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ecc:	4b64      	ldr	r3, [pc, #400]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ed8:	4b61      	ldr	r3, [pc, #388]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0b7      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ee8:	4b5d      	ldr	r3, [pc, #372]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a5c      	ldr	r2, [pc, #368]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ef4:	f7fe fe6e 	bl	8000bd4 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7fe fe6a 	bl	8000bd4 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0a4      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0e:	4b54      	ldr	r3, [pc, #336]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f1a:	4b51      	ldr	r3, [pc, #324]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	4b51      	ldr	r3, [pc, #324]	; (8002064 <HAL_RCC_OscConfig+0x7c8>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f2a:	3a01      	subs	r2, #1
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	4311      	orrs	r1, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f34:	0212      	lsls	r2, r2, #8
 8001f36:	4311      	orrs	r1, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f3c:	0852      	lsrs	r2, r2, #1
 8001f3e:	3a01      	subs	r2, #1
 8001f40:	0552      	lsls	r2, r2, #21
 8001f42:	4311      	orrs	r1, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f48:	0852      	lsrs	r2, r2, #1
 8001f4a:	3a01      	subs	r2, #1
 8001f4c:	0652      	lsls	r2, r2, #25
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f54:	0912      	lsrs	r2, r2, #4
 8001f56:	0452      	lsls	r2, r2, #17
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	4941      	ldr	r1, [pc, #260]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f60:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a3e      	ldr	r2, [pc, #248]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f6c:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4a3b      	ldr	r2, [pc, #236]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f78:	f7fe fe2c 	bl	8000bd4 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7fe fe28 	bl	8000bd4 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e062      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f92:	4b33      	ldr	r3, [pc, #204]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f9e:	e05a      	b.n	8002056 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e059      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d152      	bne.n	8002056 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2a      	ldr	r2, [pc, #168]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a27      	ldr	r2, [pc, #156]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fc8:	f7fe fe04 	bl	8000bd4 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7fe fe00 	bl	8000bd4 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e03a      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x734>
 8001fee:	e032      	b.n	8002056 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d02d      	beq.n	8002052 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8001ffc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002000:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4a13      	ldr	r2, [pc, #76]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8002014:	f023 0303 	bic.w	r3, r3, #3
 8002018:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8002020:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002028:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7fe fdd3 	bl	8000bd4 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002032:	f7fe fdcf 	bl	8000bd4 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e009      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_OscConfig+0x7c4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x796>
 8002050:	e001      	b.n	8002056 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	f99d808c 	.word	0xf99d808c

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0c8      	b.n	800220e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b66      	ldr	r3, [pc, #408]	; (8002218 <HAL_RCC_ClockConfig+0x1b0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_ClockConfig+0x1b0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4961      	ldr	r1, [pc, #388]	; (8002218 <HAL_RCC_ClockConfig+0x1b0>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b5f      	ldr	r3, [pc, #380]	; (8002218 <HAL_RCC_ClockConfig+0x1b0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0b0      	b.n	800220e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d04c      	beq.n	8002152 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c0:	4b56      	ldr	r3, [pc, #344]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d121      	bne.n	8002110 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e09e      	b.n	800220e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d8:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d115      	bne.n	8002110 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e092      	b.n	800220e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020f0:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e086      	b.n	800220e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002100:	4b46      	ldr	r3, [pc, #280]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e07e      	b.n	800220e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002110:	4b42      	ldr	r3, [pc, #264]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 0203 	bic.w	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	493f      	ldr	r1, [pc, #252]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002122:	f7fe fd57 	bl	8000bd4 <HAL_GetTick>
 8002126:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002128:	e00a      	b.n	8002140 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212a:	f7fe fd53 	bl	8000bd4 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e066      	b.n	800220e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002140:	4b36      	ldr	r3, [pc, #216]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 020c 	and.w	r2, r3, #12
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	429a      	cmp	r2, r3
 8002150:	d1eb      	bne.n	800212a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d008      	beq.n	8002170 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215e:	4b2f      	ldr	r3, [pc, #188]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	492c      	ldr	r1, [pc, #176]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_RCC_ClockConfig+0x1b0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d210      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <HAL_RCC_ClockConfig+0x1b0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 0207 	bic.w	r2, r3, #7
 8002186:	4924      	ldr	r1, [pc, #144]	; (8002218 <HAL_RCC_ClockConfig+0x1b0>)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_RCC_ClockConfig+0x1b0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e036      	b.n	800220e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4918      	ldr	r1, [pc, #96]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4910      	ldr	r1, [pc, #64]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021de:	f000 f825 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021e2:	4602      	mov	r2, r0
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	490c      	ldr	r1, [pc, #48]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	5ccb      	ldrb	r3, [r1, r3]
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fc96 	bl	8000b34 <HAL_InitTick>
 8002208:	4603      	mov	r3, r0
 800220a:	72fb      	strb	r3, [r7, #11]

  return status;
 800220c:	7afb      	ldrb	r3, [r7, #11]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40022000 	.word	0x40022000
 800221c:	40021000 	.word	0x40021000
 8002220:	080036dc 	.word	0x080036dc
 8002224:	20000004 	.word	0x20000004
 8002228:	20000008 	.word	0x20000008

0800222c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223a:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <HAL_RCC_GetSysClockFreq+0x108>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002244:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_RCC_GetSysClockFreq+0x108>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x34>
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d121      	bne.n	800229e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d11e      	bne.n	800229e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002260:	4b34      	ldr	r3, [pc, #208]	; (8002334 <HAL_RCC_GetSysClockFreq+0x108>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_RCC_GetSysClockFreq+0x108>)
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	e005      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_RCC_GetSysClockFreq+0x108>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002288:	4a2b      	ldr	r2, [pc, #172]	; (8002338 <HAL_RCC_GetSysClockFreq+0x10c>)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002290:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10d      	bne.n	80022b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d102      	bne.n	80022aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022a4:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_RCC_GetSysClockFreq+0x110>)
 80022a6:	61bb      	str	r3, [r7, #24]
 80022a8:	e004      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <HAL_RCC_GetSysClockFreq+0x114>)
 80022b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b0c      	cmp	r3, #12
 80022b8:	d134      	bne.n	8002324 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <HAL_RCC_GetSysClockFreq+0x108>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d003      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0xac>
 80022d0:	e005      	b.n	80022de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022d2:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_RCC_GetSysClockFreq+0x110>)
 80022d4:	617b      	str	r3, [r7, #20]
      break;
 80022d6:	e005      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_RCC_GetSysClockFreq+0x114>)
 80022da:	617b      	str	r3, [r7, #20]
      break;
 80022dc:	e002      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	617b      	str	r3, [r7, #20]
      break;
 80022e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	3301      	adds	r3, #1
 80022f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	fb02 f203 	mul.w	r2, r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_GetSysClockFreq+0x108>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	0e5b      	lsrs	r3, r3, #25
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	3301      	adds	r3, #1
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002322:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002324:	69bb      	ldr	r3, [r7, #24]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	080036f4 	.word	0x080036f4
 800233c:	00f42400 	.word	0x00f42400
 8002340:	007a1200 	.word	0x007a1200

08002344 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_RCC_GetHCLKFreq+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000004 	.word	0x20000004

0800235c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002360:	f7ff fff0 	bl	8002344 <HAL_RCC_GetHCLKFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	4904      	ldr	r1, [pc, #16]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	080036ec 	.word	0x080036ec

08002388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800238c:	f7ff ffda 	bl	8002344 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0adb      	lsrs	r3, r3, #11
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4904      	ldr	r1, [pc, #16]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	080036ec 	.word	0x080036ec

080023b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023bc:	2300      	movs	r3, #0
 80023be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023cc:	f7ff fa02 	bl	80017d4 <HAL_PWREx_GetVoltageRange>
 80023d0:	6178      	str	r0, [r7, #20]
 80023d2:	e014      	b.n	80023fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b25      	ldr	r3, [pc, #148]	; (800246c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	4a24      	ldr	r2, [pc, #144]	; (800246c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	6593      	str	r3, [r2, #88]	; 0x58
 80023e0:	4b22      	ldr	r3, [pc, #136]	; (800246c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023ec:	f7ff f9f2 	bl	80017d4 <HAL_PWREx_GetVoltageRange>
 80023f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	4a1d      	ldr	r2, [pc, #116]	; (800246c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002404:	d10b      	bne.n	800241e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	d919      	bls.n	8002440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2ba0      	cmp	r3, #160	; 0xa0
 8002410:	d902      	bls.n	8002418 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002412:	2302      	movs	r3, #2
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	e013      	b.n	8002440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002418:	2301      	movs	r3, #1
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	e010      	b.n	8002440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b80      	cmp	r3, #128	; 0x80
 8002422:	d902      	bls.n	800242a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002424:	2303      	movs	r3, #3
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	e00a      	b.n	8002440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b80      	cmp	r3, #128	; 0x80
 800242e:	d102      	bne.n	8002436 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002430:	2302      	movs	r3, #2
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	e004      	b.n	8002440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b70      	cmp	r3, #112	; 0x70
 800243a:	d101      	bne.n	8002440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800243c:	2301      	movs	r3, #1
 800243e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 0207 	bic.w	r2, r3, #7
 8002448:	4909      	ldr	r1, [pc, #36]	; (8002470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	429a      	cmp	r2, r3
 800245c:	d001      	beq.n	8002462 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	40022000 	.word	0x40022000

08002474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800247c:	2300      	movs	r3, #0
 800247e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002480:	2300      	movs	r3, #0
 8002482:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800248c:	2b00      	cmp	r3, #0
 800248e:	d041      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002494:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002498:	d02a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800249a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800249e:	d824      	bhi.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024a4:	d008      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024aa:	d81e      	bhi.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b4:	d010      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024b6:	e018      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024b8:	4b86      	ldr	r3, [pc, #536]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a85      	ldr	r2, [pc, #532]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024c4:	e015      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 fabb 	bl	8002a48 <RCCEx_PLLSAI1_Config>
 80024d2:	4603      	mov	r3, r0
 80024d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024d6:	e00c      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3320      	adds	r3, #32
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fba6 	bl	8002c30 <RCCEx_PLLSAI2_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024e8:	e003      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	74fb      	strb	r3, [r7, #19]
      break;
 80024ee:	e000      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024f2:	7cfb      	ldrb	r3, [r7, #19]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10b      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f8:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002506:	4973      	ldr	r1, [pc, #460]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800250e:	e001      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d041      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002524:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002528:	d02a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800252a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800252e:	d824      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002530:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002534:	d008      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800253a:	d81e      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002544:	d010      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002546:	e018      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002548:	4b62      	ldr	r3, [pc, #392]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a61      	ldr	r2, [pc, #388]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002552:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002554:	e015      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3304      	adds	r3, #4
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f000 fa73 	bl	8002a48 <RCCEx_PLLSAI1_Config>
 8002562:	4603      	mov	r3, r0
 8002564:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002566:	e00c      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3320      	adds	r3, #32
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fb5e 	bl	8002c30 <RCCEx_PLLSAI2_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002578:	e003      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	74fb      	strb	r3, [r7, #19]
      break;
 800257e:	e000      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10b      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002588:	4b52      	ldr	r3, [pc, #328]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002596:	494f      	ldr	r1, [pc, #316]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800259e:	e001      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80a0 	beq.w	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025c6:	2300      	movs	r3, #0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00d      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025cc:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	4a40      	ldr	r2, [pc, #256]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d6:	6593      	str	r3, [r2, #88]	; 0x58
 80025d8:	4b3e      	ldr	r3, [pc, #248]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e4:	2301      	movs	r3, #1
 80025e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e8:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a3a      	ldr	r2, [pc, #232]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025f4:	f7fe faee 	bl	8000bd4 <HAL_GetTick>
 80025f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025fa:	e009      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fc:	f7fe faea 	bl	8000bd4 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d902      	bls.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	74fb      	strb	r3, [r7, #19]
        break;
 800260e:	e005      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002610:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ef      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d15c      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002622:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01f      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	429a      	cmp	r2, r3
 800263e:	d019      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002640:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800264c:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7fe faa9 	bl	8000bd4 <HAL_GetTick>
 8002682:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002684:	e00b      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe faa5 	bl	8000bd4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d902      	bls.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	74fb      	strb	r3, [r7, #19]
            break;
 800269c:	e006      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0ec      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10c      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c2:	4904      	ldr	r1, [pc, #16]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026ca:	e009      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	74bb      	strb	r3, [r7, #18]
 80026d0:	e006      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e0:	7c7b      	ldrb	r3, [r7, #17]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d105      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e6:	4b9e      	ldr	r3, [pc, #632]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	4a9d      	ldr	r2, [pc, #628]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026fe:	4b98      	ldr	r3, [pc, #608]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002704:	f023 0203 	bic.w	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	4994      	ldr	r1, [pc, #592]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002720:	4b8f      	ldr	r3, [pc, #572]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	f023 020c 	bic.w	r2, r3, #12
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	498c      	ldr	r1, [pc, #560]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002742:	4b87      	ldr	r3, [pc, #540]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002748:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	4983      	ldr	r1, [pc, #524]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002764:	4b7e      	ldr	r3, [pc, #504]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	497b      	ldr	r1, [pc, #492]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002786:	4b76      	ldr	r3, [pc, #472]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002794:	4972      	ldr	r1, [pc, #456]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027a8:	4b6d      	ldr	r3, [pc, #436]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	496a      	ldr	r1, [pc, #424]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ca:	4b65      	ldr	r3, [pc, #404]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d8:	4961      	ldr	r1, [pc, #388]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027ec:	4b5c      	ldr	r3, [pc, #368]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fa:	4959      	ldr	r1, [pc, #356]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800280e:	4b54      	ldr	r3, [pc, #336]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281c:	4950      	ldr	r1, [pc, #320]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002830:	4b4b      	ldr	r3, [pc, #300]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	4948      	ldr	r1, [pc, #288]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002852:	4b43      	ldr	r3, [pc, #268]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002858:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	493f      	ldr	r1, [pc, #252]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d028      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002874:	4b3a      	ldr	r3, [pc, #232]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002882:	4937      	ldr	r1, [pc, #220]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002892:	d106      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002894:	4b32      	ldr	r3, [pc, #200]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4a31      	ldr	r2, [pc, #196]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800289e:	60d3      	str	r3, [r2, #12]
 80028a0:	e011      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028aa:	d10c      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	2101      	movs	r1, #1
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f8c8 	bl	8002a48 <RCCEx_PLLSAI1_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d028      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028d2:	4b23      	ldr	r3, [pc, #140]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	491f      	ldr	r1, [pc, #124]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f0:	d106      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f2:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028fc:	60d3      	str	r3, [r2, #12]
 80028fe:	e011      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002908:	d10c      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	2101      	movs	r1, #1
 8002910:	4618      	mov	r0, r3
 8002912:	f000 f899 	bl	8002a48 <RCCEx_PLLSAI1_Config>
 8002916:	4603      	mov	r3, r0
 8002918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800291a:	7cfb      	ldrb	r3, [r7, #19]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002920:	7cfb      	ldrb	r3, [r7, #19]
 8002922:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02b      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293e:	4908      	ldr	r1, [pc, #32]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800294e:	d109      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a02      	ldr	r2, [pc, #8]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800295a:	60d3      	str	r3, [r2, #12]
 800295c:	e014      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800296c:	d10c      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3304      	adds	r3, #4
 8002972:	2101      	movs	r1, #1
 8002974:	4618      	mov	r0, r3
 8002976:	f000 f867 	bl	8002a48 <RCCEx_PLLSAI1_Config>
 800297a:	4603      	mov	r3, r0
 800297c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d02f      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a2:	4928      	ldr	r1, [pc, #160]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029b2:	d10d      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3304      	adds	r3, #4
 80029b8:	2102      	movs	r1, #2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f844 	bl	8002a48 <RCCEx_PLLSAI1_Config>
 80029c0:	4603      	mov	r3, r0
 80029c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d014      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	74bb      	strb	r3, [r7, #18]
 80029ce:	e011      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3320      	adds	r3, #32
 80029de:	2102      	movs	r1, #2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 f925 	bl	8002c30 <RCCEx_PLLSAI2_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ea:	7cfb      	ldrb	r3, [r7, #19]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a0e:	490d      	ldr	r1, [pc, #52]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a32:	4904      	ldr	r1, [pc, #16]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000

08002a48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a56:	4b75      	ldr	r3, [pc, #468]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d018      	beq.n	8002a94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a62:	4b72      	ldr	r3, [pc, #456]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0203 	and.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d10d      	bne.n	8002a8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
       ||
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a7a:	4b6c      	ldr	r3, [pc, #432]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
       ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d047      	beq.n	8002b1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	e044      	b.n	8002b1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d018      	beq.n	8002ace <RCCEx_PLLSAI1_Config+0x86>
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d825      	bhi.n	8002aec <RCCEx_PLLSAI1_Config+0xa4>
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d002      	beq.n	8002aaa <RCCEx_PLLSAI1_Config+0x62>
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d009      	beq.n	8002abc <RCCEx_PLLSAI1_Config+0x74>
 8002aa8:	e020      	b.n	8002aec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aaa:	4b60      	ldr	r3, [pc, #384]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11d      	bne.n	8002af2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aba:	e01a      	b.n	8002af2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002abc:	4b5b      	ldr	r3, [pc, #364]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d116      	bne.n	8002af6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002acc:	e013      	b.n	8002af6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ace:	4b57      	ldr	r3, [pc, #348]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10f      	bne.n	8002afa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ada:	4b54      	ldr	r3, [pc, #336]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aea:	e006      	b.n	8002afa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      break;
 8002af0:	e004      	b.n	8002afc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002af2:	bf00      	nop
 8002af4:	e002      	b.n	8002afc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002afa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10d      	bne.n	8002b1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b02:	4b4a      	ldr	r3, [pc, #296]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	430b      	orrs	r3, r1
 8002b18:	4944      	ldr	r1, [pc, #272]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d17d      	bne.n	8002c20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b24:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a40      	ldr	r2, [pc, #256]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b30:	f7fe f850 	bl	8000bd4 <HAL_GetTick>
 8002b34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b36:	e009      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b38:	f7fe f84c 	bl	8000bd4 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d902      	bls.n	8002b4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	73fb      	strb	r3, [r7, #15]
        break;
 8002b4a:	e005      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b4c:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ef      	bne.n	8002b38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d160      	bne.n	8002c20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d111      	bne.n	8002b88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b64:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6892      	ldr	r2, [r2, #8]
 8002b74:	0211      	lsls	r1, r2, #8
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68d2      	ldr	r2, [r2, #12]
 8002b7a:	0912      	lsrs	r2, r2, #4
 8002b7c:	0452      	lsls	r2, r2, #17
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	492a      	ldr	r1, [pc, #168]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	610b      	str	r3, [r1, #16]
 8002b86:	e027      	b.n	8002bd8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d112      	bne.n	8002bb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b8e:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6892      	ldr	r2, [r2, #8]
 8002b9e:	0211      	lsls	r1, r2, #8
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6912      	ldr	r2, [r2, #16]
 8002ba4:	0852      	lsrs	r2, r2, #1
 8002ba6:	3a01      	subs	r2, #1
 8002ba8:	0552      	lsls	r2, r2, #21
 8002baa:	430a      	orrs	r2, r1
 8002bac:	491f      	ldr	r1, [pc, #124]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	610b      	str	r3, [r1, #16]
 8002bb2:	e011      	b.n	8002bd8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6892      	ldr	r2, [r2, #8]
 8002bc4:	0211      	lsls	r1, r2, #8
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6952      	ldr	r2, [r2, #20]
 8002bca:	0852      	lsrs	r2, r2, #1
 8002bcc:	3a01      	subs	r2, #1
 8002bce:	0652      	lsls	r2, r2, #25
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	4916      	ldr	r1, [pc, #88]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002be2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fd fff6 	bl	8000bd4 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bea:	e009      	b.n	8002c00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bec:	f7fd fff2 	bl	8000bd4 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d902      	bls.n	8002c00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	73fb      	strb	r3, [r7, #15]
          break;
 8002bfe:	e005      	b.n	8002c0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ef      	beq.n	8002bec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	4904      	ldr	r1, [pc, #16]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000

08002c30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c3e:	4b6a      	ldr	r3, [pc, #424]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d018      	beq.n	8002c7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c4a:	4b67      	ldr	r3, [pc, #412]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0203 	and.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d10d      	bne.n	8002c76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d009      	beq.n	8002c76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c62:	4b61      	ldr	r3, [pc, #388]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
       ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d047      	beq.n	8002d06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
 8002c7a:	e044      	b.n	8002d06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d018      	beq.n	8002cb6 <RCCEx_PLLSAI2_Config+0x86>
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d825      	bhi.n	8002cd4 <RCCEx_PLLSAI2_Config+0xa4>
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d002      	beq.n	8002c92 <RCCEx_PLLSAI2_Config+0x62>
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d009      	beq.n	8002ca4 <RCCEx_PLLSAI2_Config+0x74>
 8002c90:	e020      	b.n	8002cd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c92:	4b55      	ldr	r3, [pc, #340]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11d      	bne.n	8002cda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca2:	e01a      	b.n	8002cda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ca4:	4b50      	ldr	r3, [pc, #320]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d116      	bne.n	8002cde <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb4:	e013      	b.n	8002cde <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cb6:	4b4c      	ldr	r3, [pc, #304]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cc2:	4b49      	ldr	r3, [pc, #292]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cd2:	e006      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd8:	e004      	b.n	8002ce4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e002      	b.n	8002ce4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ce2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10d      	bne.n	8002d06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cea:	4b3f      	ldr	r3, [pc, #252]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	4939      	ldr	r1, [pc, #228]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d167      	bne.n	8002ddc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d0c:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a35      	ldr	r2, [pc, #212]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d18:	f7fd ff5c 	bl	8000bd4 <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d1e:	e009      	b.n	8002d34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d20:	f7fd ff58 	bl	8000bd4 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d902      	bls.n	8002d34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	73fb      	strb	r3, [r7, #15]
        break;
 8002d32:	e005      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d34:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ef      	bne.n	8002d20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d14a      	bne.n	8002ddc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d111      	bne.n	8002d70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d4c:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6892      	ldr	r2, [r2, #8]
 8002d5c:	0211      	lsls	r1, r2, #8
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68d2      	ldr	r2, [r2, #12]
 8002d62:	0912      	lsrs	r2, r2, #4
 8002d64:	0452      	lsls	r2, r2, #17
 8002d66:	430a      	orrs	r2, r1
 8002d68:	491f      	ldr	r1, [pc, #124]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	614b      	str	r3, [r1, #20]
 8002d6e:	e011      	b.n	8002d94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6892      	ldr	r2, [r2, #8]
 8002d80:	0211      	lsls	r1, r2, #8
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6912      	ldr	r2, [r2, #16]
 8002d86:	0852      	lsrs	r2, r2, #1
 8002d88:	3a01      	subs	r2, #1
 8002d8a:	0652      	lsls	r2, r2, #25
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	4916      	ldr	r1, [pc, #88]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7fd ff18 	bl	8000bd4 <HAL_GetTick>
 8002da4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002da6:	e009      	b.n	8002dbc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002da8:	f7fd ff14 	bl	8000bd4 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d902      	bls.n	8002dbc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	73fb      	strb	r3, [r7, #15]
          break;
 8002dba:	e005      	b.n	8002dc8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ef      	beq.n	8002da8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	4904      	ldr	r1, [pc, #16]	; (8002de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000

08002dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e040      	b.n	8002e80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fdf2 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2224      	movs	r2, #36	; 0x24
 8002e18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f82c 	bl	8002e88 <UART_SetConfig>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e022      	b.n	8002e80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 faaa 	bl	800339c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fb31 	bl	80034e0 <UART_CheckIdleState>
 8002e7e:	4603      	mov	r3, r0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e88:	b5b0      	push	{r4, r5, r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4bad      	ldr	r3, [pc, #692]	; (8003168 <UART_SetConfig+0x2e0>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	69f9      	ldr	r1, [r7, #28]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4aa2      	ldr	r2, [pc, #648]	; (800316c <UART_SetConfig+0x2e4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a99      	ldr	r2, [pc, #612]	; (8003170 <UART_SetConfig+0x2e8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d121      	bne.n	8002f52 <UART_SetConfig+0xca>
 8002f0e:	4b99      	ldr	r3, [pc, #612]	; (8003174 <UART_SetConfig+0x2ec>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d817      	bhi.n	8002f4c <UART_SetConfig+0xc4>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <UART_SetConfig+0x9c>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f41 	.word	0x08002f41
 8002f2c:	08002f3b 	.word	0x08002f3b
 8002f30:	08002f47 	.word	0x08002f47
 8002f34:	2301      	movs	r3, #1
 8002f36:	76fb      	strb	r3, [r7, #27]
 8002f38:	e0e7      	b.n	800310a <UART_SetConfig+0x282>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	76fb      	strb	r3, [r7, #27]
 8002f3e:	e0e4      	b.n	800310a <UART_SetConfig+0x282>
 8002f40:	2304      	movs	r3, #4
 8002f42:	76fb      	strb	r3, [r7, #27]
 8002f44:	e0e1      	b.n	800310a <UART_SetConfig+0x282>
 8002f46:	2308      	movs	r3, #8
 8002f48:	76fb      	strb	r3, [r7, #27]
 8002f4a:	e0de      	b.n	800310a <UART_SetConfig+0x282>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	76fb      	strb	r3, [r7, #27]
 8002f50:	e0db      	b.n	800310a <UART_SetConfig+0x282>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a88      	ldr	r2, [pc, #544]	; (8003178 <UART_SetConfig+0x2f0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d132      	bne.n	8002fc2 <UART_SetConfig+0x13a>
 8002f5c:	4b85      	ldr	r3, [pc, #532]	; (8003174 <UART_SetConfig+0x2ec>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d828      	bhi.n	8002fbc <UART_SetConfig+0x134>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <UART_SetConfig+0xe8>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002fa5 	.word	0x08002fa5
 8002f74:	08002fbd 	.word	0x08002fbd
 8002f78:	08002fbd 	.word	0x08002fbd
 8002f7c:	08002fbd 	.word	0x08002fbd
 8002f80:	08002fb1 	.word	0x08002fb1
 8002f84:	08002fbd 	.word	0x08002fbd
 8002f88:	08002fbd 	.word	0x08002fbd
 8002f8c:	08002fbd 	.word	0x08002fbd
 8002f90:	08002fab 	.word	0x08002fab
 8002f94:	08002fbd 	.word	0x08002fbd
 8002f98:	08002fbd 	.word	0x08002fbd
 8002f9c:	08002fbd 	.word	0x08002fbd
 8002fa0:	08002fb7 	.word	0x08002fb7
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	76fb      	strb	r3, [r7, #27]
 8002fa8:	e0af      	b.n	800310a <UART_SetConfig+0x282>
 8002faa:	2302      	movs	r3, #2
 8002fac:	76fb      	strb	r3, [r7, #27]
 8002fae:	e0ac      	b.n	800310a <UART_SetConfig+0x282>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	76fb      	strb	r3, [r7, #27]
 8002fb4:	e0a9      	b.n	800310a <UART_SetConfig+0x282>
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e0a6      	b.n	800310a <UART_SetConfig+0x282>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e0a3      	b.n	800310a <UART_SetConfig+0x282>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6d      	ldr	r2, [pc, #436]	; (800317c <UART_SetConfig+0x2f4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d120      	bne.n	800300e <UART_SetConfig+0x186>
 8002fcc:	4b69      	ldr	r3, [pc, #420]	; (8003174 <UART_SetConfig+0x2ec>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fd6:	2b30      	cmp	r3, #48	; 0x30
 8002fd8:	d013      	beq.n	8003002 <UART_SetConfig+0x17a>
 8002fda:	2b30      	cmp	r3, #48	; 0x30
 8002fdc:	d814      	bhi.n	8003008 <UART_SetConfig+0x180>
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d009      	beq.n	8002ff6 <UART_SetConfig+0x16e>
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d810      	bhi.n	8003008 <UART_SetConfig+0x180>
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <UART_SetConfig+0x168>
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d006      	beq.n	8002ffc <UART_SetConfig+0x174>
 8002fee:	e00b      	b.n	8003008 <UART_SetConfig+0x180>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	76fb      	strb	r3, [r7, #27]
 8002ff4:	e089      	b.n	800310a <UART_SetConfig+0x282>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	76fb      	strb	r3, [r7, #27]
 8002ffa:	e086      	b.n	800310a <UART_SetConfig+0x282>
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	76fb      	strb	r3, [r7, #27]
 8003000:	e083      	b.n	800310a <UART_SetConfig+0x282>
 8003002:	2308      	movs	r3, #8
 8003004:	76fb      	strb	r3, [r7, #27]
 8003006:	e080      	b.n	800310a <UART_SetConfig+0x282>
 8003008:	2310      	movs	r3, #16
 800300a:	76fb      	strb	r3, [r7, #27]
 800300c:	e07d      	b.n	800310a <UART_SetConfig+0x282>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a5b      	ldr	r2, [pc, #364]	; (8003180 <UART_SetConfig+0x2f8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d120      	bne.n	800305a <UART_SetConfig+0x1d2>
 8003018:	4b56      	ldr	r3, [pc, #344]	; (8003174 <UART_SetConfig+0x2ec>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003022:	2bc0      	cmp	r3, #192	; 0xc0
 8003024:	d013      	beq.n	800304e <UART_SetConfig+0x1c6>
 8003026:	2bc0      	cmp	r3, #192	; 0xc0
 8003028:	d814      	bhi.n	8003054 <UART_SetConfig+0x1cc>
 800302a:	2b80      	cmp	r3, #128	; 0x80
 800302c:	d009      	beq.n	8003042 <UART_SetConfig+0x1ba>
 800302e:	2b80      	cmp	r3, #128	; 0x80
 8003030:	d810      	bhi.n	8003054 <UART_SetConfig+0x1cc>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <UART_SetConfig+0x1b4>
 8003036:	2b40      	cmp	r3, #64	; 0x40
 8003038:	d006      	beq.n	8003048 <UART_SetConfig+0x1c0>
 800303a:	e00b      	b.n	8003054 <UART_SetConfig+0x1cc>
 800303c:	2300      	movs	r3, #0
 800303e:	76fb      	strb	r3, [r7, #27]
 8003040:	e063      	b.n	800310a <UART_SetConfig+0x282>
 8003042:	2302      	movs	r3, #2
 8003044:	76fb      	strb	r3, [r7, #27]
 8003046:	e060      	b.n	800310a <UART_SetConfig+0x282>
 8003048:	2304      	movs	r3, #4
 800304a:	76fb      	strb	r3, [r7, #27]
 800304c:	e05d      	b.n	800310a <UART_SetConfig+0x282>
 800304e:	2308      	movs	r3, #8
 8003050:	76fb      	strb	r3, [r7, #27]
 8003052:	e05a      	b.n	800310a <UART_SetConfig+0x282>
 8003054:	2310      	movs	r3, #16
 8003056:	76fb      	strb	r3, [r7, #27]
 8003058:	e057      	b.n	800310a <UART_SetConfig+0x282>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a49      	ldr	r2, [pc, #292]	; (8003184 <UART_SetConfig+0x2fc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d125      	bne.n	80030b0 <UART_SetConfig+0x228>
 8003064:	4b43      	ldr	r3, [pc, #268]	; (8003174 <UART_SetConfig+0x2ec>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003072:	d017      	beq.n	80030a4 <UART_SetConfig+0x21c>
 8003074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003078:	d817      	bhi.n	80030aa <UART_SetConfig+0x222>
 800307a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307e:	d00b      	beq.n	8003098 <UART_SetConfig+0x210>
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d811      	bhi.n	80030aa <UART_SetConfig+0x222>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <UART_SetConfig+0x20a>
 800308a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308e:	d006      	beq.n	800309e <UART_SetConfig+0x216>
 8003090:	e00b      	b.n	80030aa <UART_SetConfig+0x222>
 8003092:	2300      	movs	r3, #0
 8003094:	76fb      	strb	r3, [r7, #27]
 8003096:	e038      	b.n	800310a <UART_SetConfig+0x282>
 8003098:	2302      	movs	r3, #2
 800309a:	76fb      	strb	r3, [r7, #27]
 800309c:	e035      	b.n	800310a <UART_SetConfig+0x282>
 800309e:	2304      	movs	r3, #4
 80030a0:	76fb      	strb	r3, [r7, #27]
 80030a2:	e032      	b.n	800310a <UART_SetConfig+0x282>
 80030a4:	2308      	movs	r3, #8
 80030a6:	76fb      	strb	r3, [r7, #27]
 80030a8:	e02f      	b.n	800310a <UART_SetConfig+0x282>
 80030aa:	2310      	movs	r3, #16
 80030ac:	76fb      	strb	r3, [r7, #27]
 80030ae:	e02c      	b.n	800310a <UART_SetConfig+0x282>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2d      	ldr	r2, [pc, #180]	; (800316c <UART_SetConfig+0x2e4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d125      	bne.n	8003106 <UART_SetConfig+0x27e>
 80030ba:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <UART_SetConfig+0x2ec>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030c8:	d017      	beq.n	80030fa <UART_SetConfig+0x272>
 80030ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030ce:	d817      	bhi.n	8003100 <UART_SetConfig+0x278>
 80030d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d4:	d00b      	beq.n	80030ee <UART_SetConfig+0x266>
 80030d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030da:	d811      	bhi.n	8003100 <UART_SetConfig+0x278>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <UART_SetConfig+0x260>
 80030e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e4:	d006      	beq.n	80030f4 <UART_SetConfig+0x26c>
 80030e6:	e00b      	b.n	8003100 <UART_SetConfig+0x278>
 80030e8:	2300      	movs	r3, #0
 80030ea:	76fb      	strb	r3, [r7, #27]
 80030ec:	e00d      	b.n	800310a <UART_SetConfig+0x282>
 80030ee:	2302      	movs	r3, #2
 80030f0:	76fb      	strb	r3, [r7, #27]
 80030f2:	e00a      	b.n	800310a <UART_SetConfig+0x282>
 80030f4:	2304      	movs	r3, #4
 80030f6:	76fb      	strb	r3, [r7, #27]
 80030f8:	e007      	b.n	800310a <UART_SetConfig+0x282>
 80030fa:	2308      	movs	r3, #8
 80030fc:	76fb      	strb	r3, [r7, #27]
 80030fe:	e004      	b.n	800310a <UART_SetConfig+0x282>
 8003100:	2310      	movs	r3, #16
 8003102:	76fb      	strb	r3, [r7, #27]
 8003104:	e001      	b.n	800310a <UART_SetConfig+0x282>
 8003106:	2310      	movs	r3, #16
 8003108:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a17      	ldr	r2, [pc, #92]	; (800316c <UART_SetConfig+0x2e4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	f040 8087 	bne.w	8003224 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003116:	7efb      	ldrb	r3, [r7, #27]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d837      	bhi.n	800318c <UART_SetConfig+0x304>
 800311c:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <UART_SetConfig+0x29c>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003149 	.word	0x08003149
 8003128:	0800318d 	.word	0x0800318d
 800312c:	08003151 	.word	0x08003151
 8003130:	0800318d 	.word	0x0800318d
 8003134:	08003157 	.word	0x08003157
 8003138:	0800318d 	.word	0x0800318d
 800313c:	0800318d 	.word	0x0800318d
 8003140:	0800318d 	.word	0x0800318d
 8003144:	0800315f 	.word	0x0800315f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003148:	f7ff f908 	bl	800235c <HAL_RCC_GetPCLK1Freq>
 800314c:	6178      	str	r0, [r7, #20]
        break;
 800314e:	e022      	b.n	8003196 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003150:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <UART_SetConfig+0x300>)
 8003152:	617b      	str	r3, [r7, #20]
        break;
 8003154:	e01f      	b.n	8003196 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003156:	f7ff f869 	bl	800222c <HAL_RCC_GetSysClockFreq>
 800315a:	6178      	str	r0, [r7, #20]
        break;
 800315c:	e01b      	b.n	8003196 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003162:	617b      	str	r3, [r7, #20]
        break;
 8003164:	e017      	b.n	8003196 <UART_SetConfig+0x30e>
 8003166:	bf00      	nop
 8003168:	efff69f3 	.word	0xefff69f3
 800316c:	40008000 	.word	0x40008000
 8003170:	40013800 	.word	0x40013800
 8003174:	40021000 	.word	0x40021000
 8003178:	40004400 	.word	0x40004400
 800317c:	40004800 	.word	0x40004800
 8003180:	40004c00 	.word	0x40004c00
 8003184:	40005000 	.word	0x40005000
 8003188:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	76bb      	strb	r3, [r7, #26]
        break;
 8003194:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80f1 	beq.w	8003380 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d305      	bcc.n	80031ba <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d902      	bls.n	80031c0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	76bb      	strb	r3, [r7, #26]
 80031be:	e0df      	b.n	8003380 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f04f 0100 	mov.w	r1, #0
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	020b      	lsls	r3, r1, #8
 80031d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031d6:	0202      	lsls	r2, r0, #8
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	6849      	ldr	r1, [r1, #4]
 80031dc:	0849      	lsrs	r1, r1, #1
 80031de:	4608      	mov	r0, r1
 80031e0:	f04f 0100 	mov.w	r1, #0
 80031e4:	1814      	adds	r4, r2, r0
 80031e6:	eb43 0501 	adc.w	r5, r3, r1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	461a      	mov	r2, r3
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	4620      	mov	r0, r4
 80031f6:	4629      	mov	r1, r5
 80031f8:	f7fc ffe6 	bl	80001c8 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4613      	mov	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800320a:	d308      	bcc.n	800321e <UART_SetConfig+0x396>
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003212:	d204      	bcs.n	800321e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	e0b0      	b.n	8003380 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	76bb      	strb	r3, [r7, #26]
 8003222:	e0ad      	b.n	8003380 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322c:	d15c      	bne.n	80032e8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800322e:	7efb      	ldrb	r3, [r7, #27]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d828      	bhi.n	8003286 <UART_SetConfig+0x3fe>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <UART_SetConfig+0x3b4>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003261 	.word	0x08003261
 8003240:	08003269 	.word	0x08003269
 8003244:	08003271 	.word	0x08003271
 8003248:	08003287 	.word	0x08003287
 800324c:	08003277 	.word	0x08003277
 8003250:	08003287 	.word	0x08003287
 8003254:	08003287 	.word	0x08003287
 8003258:	08003287 	.word	0x08003287
 800325c:	0800327f 	.word	0x0800327f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003260:	f7ff f87c 	bl	800235c <HAL_RCC_GetPCLK1Freq>
 8003264:	6178      	str	r0, [r7, #20]
        break;
 8003266:	e013      	b.n	8003290 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003268:	f7ff f88e 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
 800326c:	6178      	str	r0, [r7, #20]
        break;
 800326e:	e00f      	b.n	8003290 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003270:	4b49      	ldr	r3, [pc, #292]	; (8003398 <UART_SetConfig+0x510>)
 8003272:	617b      	str	r3, [r7, #20]
        break;
 8003274:	e00c      	b.n	8003290 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003276:	f7fe ffd9 	bl	800222c <HAL_RCC_GetSysClockFreq>
 800327a:	6178      	str	r0, [r7, #20]
        break;
 800327c:	e008      	b.n	8003290 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003282:	617b      	str	r3, [r7, #20]
        break;
 8003284:	e004      	b.n	8003290 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	76bb      	strb	r3, [r7, #26]
        break;
 800328e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d074      	beq.n	8003380 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	005a      	lsls	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	441a      	add	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b0f      	cmp	r3, #15
 80032b2:	d916      	bls.n	80032e2 <UART_SetConfig+0x45a>
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ba:	d212      	bcs.n	80032e2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f023 030f 	bic.w	r3, r3, #15
 80032c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	89fb      	ldrh	r3, [r7, #14]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	89fa      	ldrh	r2, [r7, #14]
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	e04e      	b.n	8003380 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	76bb      	strb	r3, [r7, #26]
 80032e6:	e04b      	b.n	8003380 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032e8:	7efb      	ldrb	r3, [r7, #27]
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d827      	bhi.n	800333e <UART_SetConfig+0x4b6>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <UART_SetConfig+0x46c>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003319 	.word	0x08003319
 80032f8:	08003321 	.word	0x08003321
 80032fc:	08003329 	.word	0x08003329
 8003300:	0800333f 	.word	0x0800333f
 8003304:	0800332f 	.word	0x0800332f
 8003308:	0800333f 	.word	0x0800333f
 800330c:	0800333f 	.word	0x0800333f
 8003310:	0800333f 	.word	0x0800333f
 8003314:	08003337 	.word	0x08003337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003318:	f7ff f820 	bl	800235c <HAL_RCC_GetPCLK1Freq>
 800331c:	6178      	str	r0, [r7, #20]
        break;
 800331e:	e013      	b.n	8003348 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003320:	f7ff f832 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
 8003324:	6178      	str	r0, [r7, #20]
        break;
 8003326:	e00f      	b.n	8003348 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <UART_SetConfig+0x510>)
 800332a:	617b      	str	r3, [r7, #20]
        break;
 800332c:	e00c      	b.n	8003348 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332e:	f7fe ff7d 	bl	800222c <HAL_RCC_GetSysClockFreq>
 8003332:	6178      	str	r0, [r7, #20]
        break;
 8003334:	e008      	b.n	8003348 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333a:	617b      	str	r3, [r7, #20]
        break;
 800333c:	e004      	b.n	8003348 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	76bb      	strb	r3, [r7, #26]
        break;
 8003346:	bf00      	nop
    }

    if (pclk != 0U)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d018      	beq.n	8003380 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	085a      	lsrs	r2, r3, #1
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	441a      	add	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	b29b      	uxth	r3, r3
 8003362:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b0f      	cmp	r3, #15
 8003368:	d908      	bls.n	800337c <UART_SetConfig+0x4f4>
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d204      	bcs.n	800337c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	e001      	b.n	8003380 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800338c:	7ebb      	ldrb	r3, [r7, #26]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bdb0      	pop	{r4, r5, r7, pc}
 8003396:	bf00      	nop
 8003398:	00f42400 	.word	0x00f42400

0800339c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01a      	beq.n	80034b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349a:	d10a      	bne.n	80034b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
  }
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034f0:	f7fd fb70 	bl	8000bd4 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b08      	cmp	r3, #8
 8003502:	d10e      	bne.n	8003522 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f82d 	bl	8003572 <UART_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e023      	b.n	800356a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b04      	cmp	r3, #4
 800352e:	d10e      	bne.n	800354e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f817 	bl	8003572 <UART_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e00d      	b.n	800356a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	4613      	mov	r3, r2
 8003580:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003582:	e05e      	b.n	8003642 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d05a      	beq.n	8003642 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358c:	f7fd fb22 	bl	8000bd4 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	429a      	cmp	r2, r3
 800359a:	d302      	bcc.n	80035a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d11b      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e043      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02c      	beq.n	8003642 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f6:	d124      	bne.n	8003642 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003600:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003610:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e00f      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4013      	ands	r3, r2
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	429a      	cmp	r2, r3
 800365e:	d091      	beq.n	8003584 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <__libc_init_array>:
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	4d0d      	ldr	r5, [pc, #52]	; (80036a4 <__libc_init_array+0x38>)
 8003670:	4c0d      	ldr	r4, [pc, #52]	; (80036a8 <__libc_init_array+0x3c>)
 8003672:	1b64      	subs	r4, r4, r5
 8003674:	10a4      	asrs	r4, r4, #2
 8003676:	2600      	movs	r6, #0
 8003678:	42a6      	cmp	r6, r4
 800367a:	d109      	bne.n	8003690 <__libc_init_array+0x24>
 800367c:	4d0b      	ldr	r5, [pc, #44]	; (80036ac <__libc_init_array+0x40>)
 800367e:	4c0c      	ldr	r4, [pc, #48]	; (80036b0 <__libc_init_array+0x44>)
 8003680:	f000 f820 	bl	80036c4 <_init>
 8003684:	1b64      	subs	r4, r4, r5
 8003686:	10a4      	asrs	r4, r4, #2
 8003688:	2600      	movs	r6, #0
 800368a:	42a6      	cmp	r6, r4
 800368c:	d105      	bne.n	800369a <__libc_init_array+0x2e>
 800368e:	bd70      	pop	{r4, r5, r6, pc}
 8003690:	f855 3b04 	ldr.w	r3, [r5], #4
 8003694:	4798      	blx	r3
 8003696:	3601      	adds	r6, #1
 8003698:	e7ee      	b.n	8003678 <__libc_init_array+0xc>
 800369a:	f855 3b04 	ldr.w	r3, [r5], #4
 800369e:	4798      	blx	r3
 80036a0:	3601      	adds	r6, #1
 80036a2:	e7f2      	b.n	800368a <__libc_init_array+0x1e>
 80036a4:	0800372c 	.word	0x0800372c
 80036a8:	0800372c 	.word	0x0800372c
 80036ac:	0800372c 	.word	0x0800372c
 80036b0:	08003730 	.word	0x08003730

080036b4 <memset>:
 80036b4:	4402      	add	r2, r0
 80036b6:	4603      	mov	r3, r0
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d100      	bne.n	80036be <memset+0xa>
 80036bc:	4770      	bx	lr
 80036be:	f803 1b01 	strb.w	r1, [r3], #1
 80036c2:	e7f9      	b.n	80036b8 <memset+0x4>

080036c4 <_init>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr

080036d0 <_fini>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr
